#   Copyright (c) 2020  PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Setup for pip package."""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import platform
import os

from setuptools import setup, Distribution, Extension
from setuptools import find_packages
from setuptools import setup
from paddle_serving_client.version import serving_client_version
from pkg_resources import DistributionNotFound, get_distribution

        
def python_version():
    return [int(v) for v in platform.python_version().split(".")]

def find_package(pkgname):
    try:
        get_distribution(pkgname)
        return True
    except DistributionNotFound:
        return False

def copy_lib():
    os.popen('mkdir -p paddle_serving_client/lib')
    for lib in ['libpython2.7.so.1.0', 'libssl.so.10', 'libcrypto.so.10']:
        r = os.popen('whereis {}'.format(lib))
        text = r.read()
        os.popen('cp {} ./paddle_serving_client/lib'.format(text.strip().split(' ')[1]))

max_version, mid_version, min_version = python_version()

if '${PACK}' == 'ON':
    copy_lib()


REQUIRED_PACKAGES = [
    'six >= 1.10.0', 'protobuf >= 3.1.0'
]

if not find_package("paddlepaddle") and not find_package("paddlepaddle-gpu"):
    REQUIRED_PACKAGES.append("paddlepaddle")

packages=['paddle_serving_client',
          'paddle_serving_client.proto',
          'paddle_serving_client.io',
	  'paddle_serving_client.metric',
	  'paddle_serving_client.utils',]
package_data={'paddle_serving_client': ['serving_client.so','lib/*'],}
package_dir={'paddle_serving_client':
             '${PADDLE_SERVING_BINARY_DIR}/python/paddle_serving_client',
             'paddle_serving_client.proto':
             '${PADDLE_SERVING_BINARY_DIR}/python/paddle_serving_client/proto',
             'paddle_serving_client.io':
             '${PADDLE_SERVING_BINARY_DIR}/python/paddle_serving_client/io',
	     'paddle_serving_client.metric':
	     '${PADDLE_SERVING_BINARY_DIR}/python/paddle_serving_client/metric',
	     'paddle_serving_client.utils':
	     '${PADDLE_SERVING_BINARY_DIR}/python/paddle_serving_client/utils',}

setup(
    name='paddle-serving-client',
    version=serving_client_version.replace('-', ''),
    description=
    ('Paddle Serving Package for saved model with PaddlePaddle'),
    url='https://github.com/PaddlePaddle/Serving',
    author='PaddlePaddle Author',
    author_email='guru4elephant@gmail.com',
    install_requires=REQUIRED_PACKAGES,
    packages=packages,
    package_data=package_data,
    package_dir=package_dir,
    # PyPI package information.
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Intended Audience :: Education',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: Apache Software License',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Topic :: Scientific/Engineering',
        'Topic :: Scientific/Engineering :: Mathematics',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
        'Topic :: Software Development',
        'Topic :: Software Development :: Libraries',
        'Topic :: Software Development :: Libraries :: Python Modules',
    ],
    license='Apache 2.0',
    keywords=('paddle-serving serving-client deployment industrial easy-to-use'))
