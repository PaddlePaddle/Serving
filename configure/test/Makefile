###########################################################################
# Automatically generated by comake (1.0.0)  							  #
###########################################################################

#################设计系统参数#######################################
WORKROOT	?=	../../../
IDLCC	:=	$(WORKROOT)/public/idlcompiler/output/bin/mcy
RPCCC :=  $(WORKROOT)/public/ubrpc/output/bin/ubrpcgen
CC	:=	gcc
CXX	:=	g++
LEX	:=	flex
YACC	:= yacc
CFLAGS	:=	-pipe -fsigned-char -Wall -W -g -fPIC
CXXFLAGS	:=	-pipe -fsigned-char -Wall -W -g -fPIC
LEXFLAGS	:=	
YACCFLAGS	:=	
IDLFLAGS	:=  
LINKFLAGS	:=  -rdynamic
LINK	:=	g++
AR	:=	ar cqs
RANLIB	:=	
COMAKE	:=	comake

###############baidu lib 的32位 64位支持#################
HARDWARE_PLATFORM := $(shell uname -m)
ifeq ($(HARDWARE_PLATFORM),x86_64)
	lib2=lib2-64
	third=third-64
else
	lib2=lib2
	third=third
endif
ifeq ($(MAC),ARM32)
	lib2=lib2-arm32
	third=third-arm32
endif

##########################################

# 编译参数
DEP_INCPATH =  -I$(WORKROOT)/public/spreg/output//include/ -I$(WORKROOT)/$(lib2)/ullib//include/ -I$(WORKROOT)/$(third)/pcre//include/ -I$(WORKROOT)/$(lib2)/bsl//include/ -I../output//include/
DEP_LDFLAGS =  -L../output//lib/ -L$(WORKROOT)/$(lib2)/bsl//lib/ -L$(WORKROOT)/$(third)/pcre//lib/ -L$(WORKROOT)/$(lib2)/ullib//lib/ -L$(WORKROOT)/public/spreg/output//lib/
DEP_LDLIBS = -lconfig -lspreg -lpcre -lpcrecpp -lpcreposix -lbsl -lullib
INCPATH =  -I. -I..
MAKDEP = Makefile.dep


#start target
first : all

############# 默认推到公式
.SUFFIXES: .c .cpp .cc .cxx .C .idl .des
.PRECIOUS: %.cpp

.cpp.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cc.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cxx.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.C.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.c.o:
	$(CC) -c -o $@ $<  $(CFLAGS) $(CPPFLAGS) $(INCPATH)

.idl.cpp:
	$(IDLCC) --ns=$(*F) -o $* $< $(CPPFLAGS) $(INCPATH) $(IDLFLAGS)

#############
###cpp 支持
%info : %
	ccp $<
#############


#__$MAKEFILE_RULES$__



###############编译目标
all :  target output 
.PHONY : all clean test output comake src conf 

target : test_get_default test_1010new test_ivar test_auto test_cfg test_conf test_demo test_err test_get_value test_option test_rawdata test_reader test_rebuild test_str test_t1 test_trans_float test_trans_str2str test_xiaowei test_cfg2 test_cfg3 test_zr test_to_default test_checkone test_reloader test_sigreload test_filereload test_setvalue 
#target : rpcidl test_get_default test_1010new test_ivar test_auto test_cfg test_conf test_demo test_err test_get_value test_option test_rawdata test_reader test_rebuild test_str test_t1 test_trans_float test_trans_str2str test_xiaowei test_cfg2 test_cfg3 test_zr test_to_default test_checkone test_reloader test_sigreload test_filereload test_setvalue 
#target : 
#__$target_CMDLINE$__

rpcidl : 

clean_rpcidl : 


test : 


comake :
	-make clean
	-comake 

#-include $(MAKDEP)


#----------------build target : test_get_default--------------------

test_get_default : CC := gcc
test_get_default : CXX := g++
test_get_default : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_get_default : CPPFLAGS := 
test_get_default : IDLFLAGS := 
test_get_default : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_get_default : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_get_default : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_get_default : LDFLAGS :=  $(DEP_LDFLAGS)
test_get_default : LINKFLAGS := -rdynamic

test_get_default_SOURCES := $(wildcard comake_autogen.cpp test_get_default.cpp)
#test_get_default_HEADERS := $(wildcard *.h)
test_get_default_HEADERS := *.h
test_get_default_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_get_default_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_get_default_IDLSRC))
test_get_default_IDLSRCH := $(patsubst %.idl,%.h, $(test_get_default_IDLSRC))
test_get_default_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_get_default.des)
test_get_default_CONFRANGE := $(patsubst %.des,%.range, $(test_get_default_CONFDES))
test_get_default_OBJS := $(test_get_default_IDLSRC:.idl=.o)
test_get_default_OBJS += $(test_get_default_SOURCES:.c=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.cc=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.cpp=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.cxx=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.C=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.idl=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.yacc=.o)
test_get_default_OBJS := $(test_get_default_OBJS:.lex=.o)
test_get_default : $(test_get_default_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_get_default_CONFDES);do cpp -C -o test_get_default.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_get_default.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_get_default_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_get_default output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_get_default_clean
	-rm -rf $(test_get_default_OBJS) $(test_get_default_IDLSRCCPP) $(test_get_default_IDLSRCH) test_get_default.range conf/test_get_default.range
	-rm -rf test_get_default
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_get_default_ccpc
	ccp $(test_get_default_SOURCES) --formatter vim
endef
	

define test_get_default_cov
	
endef
	



#---------------------end build target : test_get_default------------------

#----------------build target : test_1010new--------------------

test_1010new : CC := gcc
test_1010new : CXX := g++
test_1010new : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_1010new : CPPFLAGS := 
test_1010new : IDLFLAGS := 
test_1010new : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_1010new : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_1010new : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_1010new : LDFLAGS :=  $(DEP_LDFLAGS)
test_1010new : LINKFLAGS := -rdynamic

test_1010new_SOURCES := $(wildcard comake_autogen.cpp test_1010new.cpp)
#test_1010new_HEADERS := $(wildcard *.h)
test_1010new_HEADERS := *.h
test_1010new_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_1010new_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_1010new_IDLSRC))
test_1010new_IDLSRCH := $(patsubst %.idl,%.h, $(test_1010new_IDLSRC))
test_1010new_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_1010new.des)
test_1010new_CONFRANGE := $(patsubst %.des,%.range, $(test_1010new_CONFDES))
test_1010new_OBJS := $(test_1010new_IDLSRC:.idl=.o)
test_1010new_OBJS += $(test_1010new_SOURCES:.c=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.cc=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.cpp=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.cxx=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.C=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.idl=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.yacc=.o)
test_1010new_OBJS := $(test_1010new_OBJS:.lex=.o)
test_1010new : $(test_1010new_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_1010new_CONFDES);do cpp -C -o test_1010new.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_1010new.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_1010new_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_1010new output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_1010new_clean
	-rm -rf $(test_1010new_OBJS) $(test_1010new_IDLSRCCPP) $(test_1010new_IDLSRCH) test_1010new.range conf/test_1010new.range
	-rm -rf test_1010new
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_1010new_ccpc
	ccp $(test_1010new_SOURCES) --formatter vim
endef
	

define test_1010new_cov
	
endef
	



#---------------------end build target : test_1010new------------------

#----------------build target : test_ivar--------------------

test_ivar : CC := gcc
test_ivar : CXX := g++
test_ivar : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_ivar : CPPFLAGS := 
test_ivar : IDLFLAGS := 
test_ivar : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_ivar : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_ivar : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_ivar : LDFLAGS :=  $(DEP_LDFLAGS)
test_ivar : LINKFLAGS := -rdynamic

test_ivar_SOURCES := $(wildcard comake_autogen.cpp test_ivar.cpp)
#test_ivar_HEADERS := $(wildcard *.h)
test_ivar_HEADERS := *.h
test_ivar_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_ivar_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_ivar_IDLSRC))
test_ivar_IDLSRCH := $(patsubst %.idl,%.h, $(test_ivar_IDLSRC))
test_ivar_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_ivar.des)
test_ivar_CONFRANGE := $(patsubst %.des,%.range, $(test_ivar_CONFDES))
test_ivar_OBJS := $(test_ivar_IDLSRC:.idl=.o)
test_ivar_OBJS += $(test_ivar_SOURCES:.c=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.cc=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.cpp=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.cxx=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.C=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.idl=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.yacc=.o)
test_ivar_OBJS := $(test_ivar_OBJS:.lex=.o)
test_ivar : $(test_ivar_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_ivar_CONFDES);do cpp -C -o test_ivar.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_ivar.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_ivar_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_ivar output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_ivar_clean
	-rm -rf $(test_ivar_OBJS) $(test_ivar_IDLSRCCPP) $(test_ivar_IDLSRCH) test_ivar.range conf/test_ivar.range
	-rm -rf test_ivar
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_ivar_ccpc
	ccp $(test_ivar_SOURCES) --formatter vim
endef
	

define test_ivar_cov
	
endef
	



#---------------------end build target : test_ivar------------------

#----------------build target : test_auto--------------------

test_auto : CC := gcc
test_auto : CXX := g++
test_auto : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_auto : CPPFLAGS := 
test_auto : IDLFLAGS := 
test_auto : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_auto : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_auto : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_auto : LDFLAGS :=  $(DEP_LDFLAGS)
test_auto : LINKFLAGS := -rdynamic

test_auto_SOURCES := $(wildcard comake_autogen.cpp test_auto.cpp)
#test_auto_HEADERS := $(wildcard *.h)
test_auto_HEADERS := *.h
test_auto_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_auto_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_auto_IDLSRC))
test_auto_IDLSRCH := $(patsubst %.idl,%.h, $(test_auto_IDLSRC))
test_auto_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_auto.des)
test_auto_CONFRANGE := $(patsubst %.des,%.range, $(test_auto_CONFDES))
test_auto_OBJS := $(test_auto_IDLSRC:.idl=.o)
test_auto_OBJS += $(test_auto_SOURCES:.c=.o)
test_auto_OBJS := $(test_auto_OBJS:.cc=.o)
test_auto_OBJS := $(test_auto_OBJS:.cpp=.o)
test_auto_OBJS := $(test_auto_OBJS:.cxx=.o)
test_auto_OBJS := $(test_auto_OBJS:.C=.o)
test_auto_OBJS := $(test_auto_OBJS:.idl=.o)
test_auto_OBJS := $(test_auto_OBJS:.yacc=.o)
test_auto_OBJS := $(test_auto_OBJS:.lex=.o)
test_auto : $(test_auto_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_auto_CONFDES);do cpp -C -o test_auto.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_auto.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_auto_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_auto output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_auto_clean
	-rm -rf $(test_auto_OBJS) $(test_auto_IDLSRCCPP) $(test_auto_IDLSRCH) test_auto.range conf/test_auto.range
	-rm -rf test_auto
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_auto_ccpc
	ccp $(test_auto_SOURCES) --formatter vim
endef
	

define test_auto_cov
	
endef
	



#---------------------end build target : test_auto------------------

#----------------build target : test_cfg--------------------

test_cfg : CC := gcc
test_cfg : CXX := g++
test_cfg : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg : CPPFLAGS := 
test_cfg : IDLFLAGS := 
test_cfg : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_cfg : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_cfg : LDFLAGS :=  $(DEP_LDFLAGS)
test_cfg : LINKFLAGS := -rdynamic

test_cfg_SOURCES := $(wildcard comake_autogen.cpp test_cfg.cpp)
#test_cfg_HEADERS := $(wildcard *.h)
test_cfg_HEADERS := *.h
test_cfg_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_cfg_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_cfg_IDLSRC))
test_cfg_IDLSRCH := $(patsubst %.idl,%.h, $(test_cfg_IDLSRC))
test_cfg_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_cfg.des)
test_cfg_CONFRANGE := $(patsubst %.des,%.range, $(test_cfg_CONFDES))
test_cfg_OBJS := $(test_cfg_IDLSRC:.idl=.o)
test_cfg_OBJS += $(test_cfg_SOURCES:.c=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.cc=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.cpp=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.cxx=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.C=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.idl=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.yacc=.o)
test_cfg_OBJS := $(test_cfg_OBJS:.lex=.o)
test_cfg : $(test_cfg_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_cfg_CONFDES);do cpp -C -o test_cfg.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_cfg.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_cfg_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_cfg output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_cfg_clean
	-rm -rf $(test_cfg_OBJS) $(test_cfg_IDLSRCCPP) $(test_cfg_IDLSRCH) test_cfg.range conf/test_cfg.range
	-rm -rf test_cfg
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_cfg_ccpc
	ccp $(test_cfg_SOURCES) --formatter vim
endef
	

define test_cfg_cov
	
endef
	



#---------------------end build target : test_cfg------------------

#----------------build target : test_conf--------------------

test_conf : CC := gcc
test_conf : CXX := g++
test_conf : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_conf : CPPFLAGS := 
test_conf : IDLFLAGS := 
test_conf : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_conf : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_conf : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_conf : LDFLAGS :=  $(DEP_LDFLAGS)
test_conf : LINKFLAGS := -rdynamic

test_conf_SOURCES := $(wildcard comake_autogen.cpp test_conf.cpp)
#test_conf_HEADERS := $(wildcard *.h)
test_conf_HEADERS := *.h
test_conf_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_conf_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_conf_IDLSRC))
test_conf_IDLSRCH := $(patsubst %.idl,%.h, $(test_conf_IDLSRC))
test_conf_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_conf.des)
test_conf_CONFRANGE := $(patsubst %.des,%.range, $(test_conf_CONFDES))
test_conf_OBJS := $(test_conf_IDLSRC:.idl=.o)
test_conf_OBJS += $(test_conf_SOURCES:.c=.o)
test_conf_OBJS := $(test_conf_OBJS:.cc=.o)
test_conf_OBJS := $(test_conf_OBJS:.cpp=.o)
test_conf_OBJS := $(test_conf_OBJS:.cxx=.o)
test_conf_OBJS := $(test_conf_OBJS:.C=.o)
test_conf_OBJS := $(test_conf_OBJS:.idl=.o)
test_conf_OBJS := $(test_conf_OBJS:.yacc=.o)
test_conf_OBJS := $(test_conf_OBJS:.lex=.o)
test_conf : $(test_conf_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_conf_CONFDES);do cpp -C -o test_conf.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_conf.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_conf_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_conf output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_conf_clean
	-rm -rf $(test_conf_OBJS) $(test_conf_IDLSRCCPP) $(test_conf_IDLSRCH) test_conf.range conf/test_conf.range
	-rm -rf test_conf
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_conf_ccpc
	ccp $(test_conf_SOURCES) --formatter vim
endef
	

define test_conf_cov
	
endef
	



#---------------------end build target : test_conf------------------

#----------------build target : test_demo--------------------

test_demo : CC := gcc
test_demo : CXX := g++
test_demo : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_demo : CPPFLAGS := 
test_demo : IDLFLAGS := 
test_demo : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_demo : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_demo : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_demo : LDFLAGS :=  $(DEP_LDFLAGS)
test_demo : LINKFLAGS := -rdynamic

test_demo_SOURCES := $(wildcard comake_autogen.cpp test_demo.cpp)
#test_demo_HEADERS := $(wildcard *.h)
test_demo_HEADERS := *.h
test_demo_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_demo_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_demo_IDLSRC))
test_demo_IDLSRCH := $(patsubst %.idl,%.h, $(test_demo_IDLSRC))
test_demo_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_demo.des)
test_demo_CONFRANGE := $(patsubst %.des,%.range, $(test_demo_CONFDES))
test_demo_OBJS := $(test_demo_IDLSRC:.idl=.o)
test_demo_OBJS += $(test_demo_SOURCES:.c=.o)
test_demo_OBJS := $(test_demo_OBJS:.cc=.o)
test_demo_OBJS := $(test_demo_OBJS:.cpp=.o)
test_demo_OBJS := $(test_demo_OBJS:.cxx=.o)
test_demo_OBJS := $(test_demo_OBJS:.C=.o)
test_demo_OBJS := $(test_demo_OBJS:.idl=.o)
test_demo_OBJS := $(test_demo_OBJS:.yacc=.o)
test_demo_OBJS := $(test_demo_OBJS:.lex=.o)
test_demo : $(test_demo_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_demo_CONFDES);do cpp -C -o test_demo.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_demo.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_demo_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_demo output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_demo_clean
	-rm -rf $(test_demo_OBJS) $(test_demo_IDLSRCCPP) $(test_demo_IDLSRCH) test_demo.range conf/test_demo.range
	-rm -rf test_demo
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_demo_ccpc
	ccp $(test_demo_SOURCES) --formatter vim
endef
	

define test_demo_cov
	
endef
	



#---------------------end build target : test_demo------------------

#----------------build target : test_err--------------------

test_err : CC := gcc
test_err : CXX := g++
test_err : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_err : CPPFLAGS := 
test_err : IDLFLAGS := 
test_err : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_err : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_err : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_err : LDFLAGS :=  $(DEP_LDFLAGS)
test_err : LINKFLAGS := -rdynamic

test_err_SOURCES := $(wildcard comake_autogen.cpp test_err.cpp)
#test_err_HEADERS := $(wildcard *.h)
test_err_HEADERS := *.h
test_err_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_err_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_err_IDLSRC))
test_err_IDLSRCH := $(patsubst %.idl,%.h, $(test_err_IDLSRC))
test_err_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_err.des)
test_err_CONFRANGE := $(patsubst %.des,%.range, $(test_err_CONFDES))
test_err_OBJS := $(test_err_IDLSRC:.idl=.o)
test_err_OBJS += $(test_err_SOURCES:.c=.o)
test_err_OBJS := $(test_err_OBJS:.cc=.o)
test_err_OBJS := $(test_err_OBJS:.cpp=.o)
test_err_OBJS := $(test_err_OBJS:.cxx=.o)
test_err_OBJS := $(test_err_OBJS:.C=.o)
test_err_OBJS := $(test_err_OBJS:.idl=.o)
test_err_OBJS := $(test_err_OBJS:.yacc=.o)
test_err_OBJS := $(test_err_OBJS:.lex=.o)
test_err : $(test_err_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_err_CONFDES);do cpp -C -o test_err.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_err.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_err_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_err output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_err_clean
	-rm -rf $(test_err_OBJS) $(test_err_IDLSRCCPP) $(test_err_IDLSRCH) test_err.range conf/test_err.range
	-rm -rf test_err
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_err_ccpc
	ccp $(test_err_SOURCES) --formatter vim
endef
	

define test_err_cov
	
endef
	



#---------------------end build target : test_err------------------

#----------------build target : test_get_value--------------------

test_get_value : CC := gcc
test_get_value : CXX := g++
test_get_value : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_get_value : CPPFLAGS := 
test_get_value : IDLFLAGS := 
test_get_value : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_get_value : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_get_value : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_get_value : LDFLAGS :=  $(DEP_LDFLAGS)
test_get_value : LINKFLAGS := -rdynamic

test_get_value_SOURCES := $(wildcard comake_autogen.cpp test_get_value.cpp)
#test_get_value_HEADERS := $(wildcard *.h)
test_get_value_HEADERS := *.h
test_get_value_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_get_value_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_get_value_IDLSRC))
test_get_value_IDLSRCH := $(patsubst %.idl,%.h, $(test_get_value_IDLSRC))
test_get_value_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_get_value.des)
test_get_value_CONFRANGE := $(patsubst %.des,%.range, $(test_get_value_CONFDES))
test_get_value_OBJS := $(test_get_value_IDLSRC:.idl=.o)
test_get_value_OBJS += $(test_get_value_SOURCES:.c=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.cc=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.cpp=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.cxx=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.C=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.idl=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.yacc=.o)
test_get_value_OBJS := $(test_get_value_OBJS:.lex=.o)
test_get_value : $(test_get_value_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_get_value_CONFDES);do cpp -C -o test_get_value.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_get_value.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_get_value_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_get_value output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_get_value_clean
	-rm -rf $(test_get_value_OBJS) $(test_get_value_IDLSRCCPP) $(test_get_value_IDLSRCH) test_get_value.range conf/test_get_value.range
	-rm -rf test_get_value
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_get_value_ccpc
	ccp $(test_get_value_SOURCES) --formatter vim
endef
	

define test_get_value_cov
	
endef
	



#---------------------end build target : test_get_value------------------

#----------------build target : test_option--------------------

test_option : CC := gcc
test_option : CXX := g++
test_option : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_option : CPPFLAGS := 
test_option : IDLFLAGS := 
test_option : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_option : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_option : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_option : LDFLAGS :=  $(DEP_LDFLAGS)
test_option : LINKFLAGS := -rdynamic

test_option_SOURCES := $(wildcard comake_autogen.cpp test_option.cpp)
#test_option_HEADERS := $(wildcard *.h)
test_option_HEADERS := *.h
test_option_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_option_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_option_IDLSRC))
test_option_IDLSRCH := $(patsubst %.idl,%.h, $(test_option_IDLSRC))
test_option_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_option.des)
test_option_CONFRANGE := $(patsubst %.des,%.range, $(test_option_CONFDES))
test_option_OBJS := $(test_option_IDLSRC:.idl=.o)
test_option_OBJS += $(test_option_SOURCES:.c=.o)
test_option_OBJS := $(test_option_OBJS:.cc=.o)
test_option_OBJS := $(test_option_OBJS:.cpp=.o)
test_option_OBJS := $(test_option_OBJS:.cxx=.o)
test_option_OBJS := $(test_option_OBJS:.C=.o)
test_option_OBJS := $(test_option_OBJS:.idl=.o)
test_option_OBJS := $(test_option_OBJS:.yacc=.o)
test_option_OBJS := $(test_option_OBJS:.lex=.o)
test_option : $(test_option_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_option_CONFDES);do cpp -C -o test_option.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_option.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_option_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_option output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_option_clean
	-rm -rf $(test_option_OBJS) $(test_option_IDLSRCCPP) $(test_option_IDLSRCH) test_option.range conf/test_option.range
	-rm -rf test_option
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_option_ccpc
	ccp $(test_option_SOURCES) --formatter vim
endef
	

define test_option_cov
	
endef
	



#---------------------end build target : test_option------------------

#----------------build target : test_rawdata--------------------

test_rawdata : CC := gcc
test_rawdata : CXX := g++
test_rawdata : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_rawdata : CPPFLAGS := 
test_rawdata : IDLFLAGS := 
test_rawdata : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_rawdata : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_rawdata : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_rawdata : LDFLAGS :=  $(DEP_LDFLAGS)
test_rawdata : LINKFLAGS := -rdynamic

test_rawdata_SOURCES := $(wildcard comake_autogen.cpp test_rawdata.cpp)
#test_rawdata_HEADERS := $(wildcard *.h)
test_rawdata_HEADERS := *.h
test_rawdata_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_rawdata_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_rawdata_IDLSRC))
test_rawdata_IDLSRCH := $(patsubst %.idl,%.h, $(test_rawdata_IDLSRC))
test_rawdata_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_rawdata.des)
test_rawdata_CONFRANGE := $(patsubst %.des,%.range, $(test_rawdata_CONFDES))
test_rawdata_OBJS := $(test_rawdata_IDLSRC:.idl=.o)
test_rawdata_OBJS += $(test_rawdata_SOURCES:.c=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.cc=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.cpp=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.cxx=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.C=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.idl=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.yacc=.o)
test_rawdata_OBJS := $(test_rawdata_OBJS:.lex=.o)
test_rawdata : $(test_rawdata_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_rawdata_CONFDES);do cpp -C -o test_rawdata.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_rawdata.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_rawdata_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_rawdata output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_rawdata_clean
	-rm -rf $(test_rawdata_OBJS) $(test_rawdata_IDLSRCCPP) $(test_rawdata_IDLSRCH) test_rawdata.range conf/test_rawdata.range
	-rm -rf test_rawdata
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_rawdata_ccpc
	ccp $(test_rawdata_SOURCES) --formatter vim
endef
	

define test_rawdata_cov
	
endef
	



#---------------------end build target : test_rawdata------------------

#----------------build target : test_reader--------------------

test_reader : CC := gcc
test_reader : CXX := g++
test_reader : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_reader : CPPFLAGS := 
test_reader : IDLFLAGS := 
test_reader : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_reader : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_reader : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_reader : LDFLAGS :=  $(DEP_LDFLAGS)
test_reader : LINKFLAGS := -rdynamic

test_reader_SOURCES := $(wildcard comake_autogen.cpp test_reader.cpp)
#test_reader_HEADERS := $(wildcard *.h)
test_reader_HEADERS := *.h
test_reader_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_reader_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_reader_IDLSRC))
test_reader_IDLSRCH := $(patsubst %.idl,%.h, $(test_reader_IDLSRC))
test_reader_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_reader.des)
test_reader_CONFRANGE := $(patsubst %.des,%.range, $(test_reader_CONFDES))
test_reader_OBJS := $(test_reader_IDLSRC:.idl=.o)
test_reader_OBJS += $(test_reader_SOURCES:.c=.o)
test_reader_OBJS := $(test_reader_OBJS:.cc=.o)
test_reader_OBJS := $(test_reader_OBJS:.cpp=.o)
test_reader_OBJS := $(test_reader_OBJS:.cxx=.o)
test_reader_OBJS := $(test_reader_OBJS:.C=.o)
test_reader_OBJS := $(test_reader_OBJS:.idl=.o)
test_reader_OBJS := $(test_reader_OBJS:.yacc=.o)
test_reader_OBJS := $(test_reader_OBJS:.lex=.o)
test_reader : $(test_reader_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_reader_CONFDES);do cpp -C -o test_reader.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_reader.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_reader_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_reader output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_reader_clean
	-rm -rf $(test_reader_OBJS) $(test_reader_IDLSRCCPP) $(test_reader_IDLSRCH) test_reader.range conf/test_reader.range
	-rm -rf test_reader
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_reader_ccpc
	ccp $(test_reader_SOURCES) --formatter vim
endef
	

define test_reader_cov
	
endef
	



#---------------------end build target : test_reader------------------

#----------------build target : test_rebuild--------------------

test_rebuild : CC := gcc
test_rebuild : CXX := g++
test_rebuild : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_rebuild : CPPFLAGS := 
test_rebuild : IDLFLAGS := 
test_rebuild : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_rebuild : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_rebuild : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_rebuild : LDFLAGS :=  $(DEP_LDFLAGS)
test_rebuild : LINKFLAGS := -rdynamic

test_rebuild_SOURCES := $(wildcard comake_autogen.cpp test_rebuild.cpp)
#test_rebuild_HEADERS := $(wildcard *.h)
test_rebuild_HEADERS := *.h
test_rebuild_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_rebuild_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_rebuild_IDLSRC))
test_rebuild_IDLSRCH := $(patsubst %.idl,%.h, $(test_rebuild_IDLSRC))
test_rebuild_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_rebuild.des)
test_rebuild_CONFRANGE := $(patsubst %.des,%.range, $(test_rebuild_CONFDES))
test_rebuild_OBJS := $(test_rebuild_IDLSRC:.idl=.o)
test_rebuild_OBJS += $(test_rebuild_SOURCES:.c=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.cc=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.cpp=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.cxx=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.C=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.idl=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.yacc=.o)
test_rebuild_OBJS := $(test_rebuild_OBJS:.lex=.o)
test_rebuild : $(test_rebuild_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_rebuild_CONFDES);do cpp -C -o test_rebuild.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_rebuild.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_rebuild_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_rebuild output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_rebuild_clean
	-rm -rf $(test_rebuild_OBJS) $(test_rebuild_IDLSRCCPP) $(test_rebuild_IDLSRCH) test_rebuild.range conf/test_rebuild.range
	-rm -rf test_rebuild
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_rebuild_ccpc
	ccp $(test_rebuild_SOURCES) --formatter vim
endef
	

define test_rebuild_cov
	
endef
	



#---------------------end build target : test_rebuild------------------

#----------------build target : test_str--------------------

test_str : CC := gcc
test_str : CXX := g++
test_str : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_str : CPPFLAGS := 
test_str : IDLFLAGS := 
test_str : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_str : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_str : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_str : LDFLAGS :=  $(DEP_LDFLAGS)
test_str : LINKFLAGS := -rdynamic

test_str_SOURCES := $(wildcard comake_autogen.cpp test_str.cpp)
#test_str_HEADERS := $(wildcard *.h)
test_str_HEADERS := *.h
test_str_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_str_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_str_IDLSRC))
test_str_IDLSRCH := $(patsubst %.idl,%.h, $(test_str_IDLSRC))
test_str_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_str.des)
test_str_CONFRANGE := $(patsubst %.des,%.range, $(test_str_CONFDES))
test_str_OBJS := $(test_str_IDLSRC:.idl=.o)
test_str_OBJS += $(test_str_SOURCES:.c=.o)
test_str_OBJS := $(test_str_OBJS:.cc=.o)
test_str_OBJS := $(test_str_OBJS:.cpp=.o)
test_str_OBJS := $(test_str_OBJS:.cxx=.o)
test_str_OBJS := $(test_str_OBJS:.C=.o)
test_str_OBJS := $(test_str_OBJS:.idl=.o)
test_str_OBJS := $(test_str_OBJS:.yacc=.o)
test_str_OBJS := $(test_str_OBJS:.lex=.o)
test_str : $(test_str_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_str_CONFDES);do cpp -C -o test_str.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_str.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_str_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_str output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_str_clean
	-rm -rf $(test_str_OBJS) $(test_str_IDLSRCCPP) $(test_str_IDLSRCH) test_str.range conf/test_str.range
	-rm -rf test_str
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_str_ccpc
	ccp $(test_str_SOURCES) --formatter vim
endef
	

define test_str_cov
	
endef
	



#---------------------end build target : test_str------------------

#----------------build target : test_t1--------------------

test_t1 : CC := gcc
test_t1 : CXX := g++
test_t1 : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_t1 : CPPFLAGS := 
test_t1 : IDLFLAGS := 
test_t1 : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_t1 : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_t1 : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_t1 : LDFLAGS :=  $(DEP_LDFLAGS)
test_t1 : LINKFLAGS := -rdynamic

test_t1_SOURCES := $(wildcard comake_autogen.cpp test_t1.cpp)
#test_t1_HEADERS := $(wildcard *.h)
test_t1_HEADERS := *.h
test_t1_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_t1_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_t1_IDLSRC))
test_t1_IDLSRCH := $(patsubst %.idl,%.h, $(test_t1_IDLSRC))
test_t1_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_t1.des)
test_t1_CONFRANGE := $(patsubst %.des,%.range, $(test_t1_CONFDES))
test_t1_OBJS := $(test_t1_IDLSRC:.idl=.o)
test_t1_OBJS += $(test_t1_SOURCES:.c=.o)
test_t1_OBJS := $(test_t1_OBJS:.cc=.o)
test_t1_OBJS := $(test_t1_OBJS:.cpp=.o)
test_t1_OBJS := $(test_t1_OBJS:.cxx=.o)
test_t1_OBJS := $(test_t1_OBJS:.C=.o)
test_t1_OBJS := $(test_t1_OBJS:.idl=.o)
test_t1_OBJS := $(test_t1_OBJS:.yacc=.o)
test_t1_OBJS := $(test_t1_OBJS:.lex=.o)
test_t1 : $(test_t1_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_t1_CONFDES);do cpp -C -o test_t1.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_t1.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_t1_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_t1 output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_t1_clean
	-rm -rf $(test_t1_OBJS) $(test_t1_IDLSRCCPP) $(test_t1_IDLSRCH) test_t1.range conf/test_t1.range
	-rm -rf test_t1
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_t1_ccpc
	ccp $(test_t1_SOURCES) --formatter vim
endef
	

define test_t1_cov
	
endef
	



#---------------------end build target : test_t1------------------

#----------------build target : test_trans_float--------------------

test_trans_float : CC := gcc
test_trans_float : CXX := g++
test_trans_float : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_trans_float : CPPFLAGS := 
test_trans_float : IDLFLAGS := 
test_trans_float : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_trans_float : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_trans_float : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_trans_float : LDFLAGS :=  $(DEP_LDFLAGS)
test_trans_float : LINKFLAGS := -rdynamic

test_trans_float_SOURCES := $(wildcard comake_autogen.cpp test_trans_float.cpp)
#test_trans_float_HEADERS := $(wildcard *.h)
test_trans_float_HEADERS := *.h
test_trans_float_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_trans_float_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_trans_float_IDLSRC))
test_trans_float_IDLSRCH := $(patsubst %.idl,%.h, $(test_trans_float_IDLSRC))
test_trans_float_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_trans_float.des)
test_trans_float_CONFRANGE := $(patsubst %.des,%.range, $(test_trans_float_CONFDES))
test_trans_float_OBJS := $(test_trans_float_IDLSRC:.idl=.o)
test_trans_float_OBJS += $(test_trans_float_SOURCES:.c=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.cc=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.cpp=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.cxx=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.C=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.idl=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.yacc=.o)
test_trans_float_OBJS := $(test_trans_float_OBJS:.lex=.o)
test_trans_float : $(test_trans_float_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_trans_float_CONFDES);do cpp -C -o test_trans_float.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_trans_float.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_trans_float_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_trans_float output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_trans_float_clean
	-rm -rf $(test_trans_float_OBJS) $(test_trans_float_IDLSRCCPP) $(test_trans_float_IDLSRCH) test_trans_float.range conf/test_trans_float.range
	-rm -rf test_trans_float
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_trans_float_ccpc
	ccp $(test_trans_float_SOURCES) --formatter vim
endef
	

define test_trans_float_cov
	
endef
	



#---------------------end build target : test_trans_float------------------

#----------------build target : test_trans_str2str--------------------

test_trans_str2str : CC := gcc
test_trans_str2str : CXX := g++
test_trans_str2str : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_trans_str2str : CPPFLAGS := 
test_trans_str2str : IDLFLAGS := 
test_trans_str2str : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_trans_str2str : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_trans_str2str : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_trans_str2str : LDFLAGS :=  $(DEP_LDFLAGS)
test_trans_str2str : LINKFLAGS := -rdynamic

test_trans_str2str_SOURCES := $(wildcard comake_autogen.cpp test_trans_str2str.cpp)
#test_trans_str2str_HEADERS := $(wildcard *.h)
test_trans_str2str_HEADERS := *.h
test_trans_str2str_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_trans_str2str_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_trans_str2str_IDLSRC))
test_trans_str2str_IDLSRCH := $(patsubst %.idl,%.h, $(test_trans_str2str_IDLSRC))
test_trans_str2str_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_trans_str2str.des)
test_trans_str2str_CONFRANGE := $(patsubst %.des,%.range, $(test_trans_str2str_CONFDES))
test_trans_str2str_OBJS := $(test_trans_str2str_IDLSRC:.idl=.o)
test_trans_str2str_OBJS += $(test_trans_str2str_SOURCES:.c=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.cc=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.cpp=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.cxx=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.C=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.idl=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.yacc=.o)
test_trans_str2str_OBJS := $(test_trans_str2str_OBJS:.lex=.o)
test_trans_str2str : $(test_trans_str2str_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_trans_str2str_CONFDES);do cpp -C -o test_trans_str2str.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_trans_str2str.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_trans_str2str_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_trans_str2str output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_trans_str2str_clean
	-rm -rf $(test_trans_str2str_OBJS) $(test_trans_str2str_IDLSRCCPP) $(test_trans_str2str_IDLSRCH) test_trans_str2str.range conf/test_trans_str2str.range
	-rm -rf test_trans_str2str
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_trans_str2str_ccpc
	ccp $(test_trans_str2str_SOURCES) --formatter vim
endef
	

define test_trans_str2str_cov
	
endef
	



#---------------------end build target : test_trans_str2str------------------

#----------------build target : test_xiaowei--------------------

test_xiaowei : CC := gcc
test_xiaowei : CXX := g++
test_xiaowei : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_xiaowei : CPPFLAGS := 
test_xiaowei : IDLFLAGS := 
test_xiaowei : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_xiaowei : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_xiaowei : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_xiaowei : LDFLAGS :=  $(DEP_LDFLAGS)
test_xiaowei : LINKFLAGS := -rdynamic

test_xiaowei_SOURCES := $(wildcard comake_autogen.cpp test_xiaowei.cpp)
#test_xiaowei_HEADERS := $(wildcard *.h)
test_xiaowei_HEADERS := *.h
test_xiaowei_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_xiaowei_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_xiaowei_IDLSRC))
test_xiaowei_IDLSRCH := $(patsubst %.idl,%.h, $(test_xiaowei_IDLSRC))
test_xiaowei_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_xiaowei.des)
test_xiaowei_CONFRANGE := $(patsubst %.des,%.range, $(test_xiaowei_CONFDES))
test_xiaowei_OBJS := $(test_xiaowei_IDLSRC:.idl=.o)
test_xiaowei_OBJS += $(test_xiaowei_SOURCES:.c=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.cc=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.cpp=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.cxx=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.C=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.idl=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.yacc=.o)
test_xiaowei_OBJS := $(test_xiaowei_OBJS:.lex=.o)
test_xiaowei : $(test_xiaowei_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_xiaowei_CONFDES);do cpp -C -o test_xiaowei.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_xiaowei.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_xiaowei_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_xiaowei output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_xiaowei_clean
	-rm -rf $(test_xiaowei_OBJS) $(test_xiaowei_IDLSRCCPP) $(test_xiaowei_IDLSRCH) test_xiaowei.range conf/test_xiaowei.range
	-rm -rf test_xiaowei
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_xiaowei_ccpc
	ccp $(test_xiaowei_SOURCES) --formatter vim
endef
	

define test_xiaowei_cov
	
endef
	



#---------------------end build target : test_xiaowei------------------

#----------------build target : test_cfg2--------------------

test_cfg2 : CC := gcc
test_cfg2 : CXX := g++
test_cfg2 : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg2 : CPPFLAGS := 
test_cfg2 : IDLFLAGS := 
test_cfg2 : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg2 : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_cfg2 : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_cfg2 : LDFLAGS :=  $(DEP_LDFLAGS)
test_cfg2 : LINKFLAGS := -rdynamic

test_cfg2_SOURCES := $(wildcard comake_autogen.cpp test_cfg2.cpp)
#test_cfg2_HEADERS := $(wildcard *.h)
test_cfg2_HEADERS := *.h
test_cfg2_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_cfg2_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_cfg2_IDLSRC))
test_cfg2_IDLSRCH := $(patsubst %.idl,%.h, $(test_cfg2_IDLSRC))
test_cfg2_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_cfg2.des)
test_cfg2_CONFRANGE := $(patsubst %.des,%.range, $(test_cfg2_CONFDES))
test_cfg2_OBJS := $(test_cfg2_IDLSRC:.idl=.o)
test_cfg2_OBJS += $(test_cfg2_SOURCES:.c=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.cc=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.cpp=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.cxx=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.C=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.idl=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.yacc=.o)
test_cfg2_OBJS := $(test_cfg2_OBJS:.lex=.o)
test_cfg2 : $(test_cfg2_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_cfg2_CONFDES);do cpp -C -o test_cfg2.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_cfg2.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_cfg2_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_cfg2 output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_cfg2_clean
	-rm -rf $(test_cfg2_OBJS) $(test_cfg2_IDLSRCCPP) $(test_cfg2_IDLSRCH) test_cfg2.range conf/test_cfg2.range
	-rm -rf test_cfg2
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_cfg2_ccpc
	ccp $(test_cfg2_SOURCES) --formatter vim
endef
	

define test_cfg2_cov
	
endef
	



#---------------------end build target : test_cfg2------------------

#----------------build target : test_cfg3--------------------

test_cfg3 : CC := gcc
test_cfg3 : CXX := g++
test_cfg3 : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg3 : CPPFLAGS := 
test_cfg3 : IDLFLAGS := 
test_cfg3 : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_cfg3 : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_cfg3 : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_cfg3 : LDFLAGS :=  $(DEP_LDFLAGS)
test_cfg3 : LINKFLAGS := -rdynamic

test_cfg3_SOURCES := $(wildcard comake_autogen.cpp test_cfg3.cpp)
#test_cfg3_HEADERS := $(wildcard *.h)
test_cfg3_HEADERS := *.h
test_cfg3_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_cfg3_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_cfg3_IDLSRC))
test_cfg3_IDLSRCH := $(patsubst %.idl,%.h, $(test_cfg3_IDLSRC))
test_cfg3_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_cfg3.des)
test_cfg3_CONFRANGE := $(patsubst %.des,%.range, $(test_cfg3_CONFDES))
test_cfg3_OBJS := $(test_cfg3_IDLSRC:.idl=.o)
test_cfg3_OBJS += $(test_cfg3_SOURCES:.c=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.cc=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.cpp=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.cxx=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.C=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.idl=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.yacc=.o)
test_cfg3_OBJS := $(test_cfg3_OBJS:.lex=.o)
test_cfg3 : $(test_cfg3_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_cfg3_CONFDES);do cpp -C -o test_cfg3.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_cfg3.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_cfg3_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_cfg3 output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_cfg3_clean
	-rm -rf $(test_cfg3_OBJS) $(test_cfg3_IDLSRCCPP) $(test_cfg3_IDLSRCH) test_cfg3.range conf/test_cfg3.range
	-rm -rf test_cfg3
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_cfg3_ccpc
	ccp $(test_cfg3_SOURCES) --formatter vim
endef
	

define test_cfg3_cov
	
endef
	



#---------------------end build target : test_cfg3------------------

#----------------build target : test_zr--------------------

test_zr : CC := gcc
test_zr : CXX := g++
test_zr : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_zr : CPPFLAGS := 
test_zr : IDLFLAGS := 
test_zr : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_zr : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_zr : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_zr : LDFLAGS :=  $(DEP_LDFLAGS)
test_zr : LINKFLAGS := -rdynamic

test_zr_SOURCES := $(wildcard comake_autogen.cpp test_zr.cpp)
#test_zr_HEADERS := $(wildcard *.h)
test_zr_HEADERS := *.h
test_zr_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_zr_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_zr_IDLSRC))
test_zr_IDLSRCH := $(patsubst %.idl,%.h, $(test_zr_IDLSRC))
test_zr_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_zr.des)
test_zr_CONFRANGE := $(patsubst %.des,%.range, $(test_zr_CONFDES))
test_zr_OBJS := $(test_zr_IDLSRC:.idl=.o)
test_zr_OBJS += $(test_zr_SOURCES:.c=.o)
test_zr_OBJS := $(test_zr_OBJS:.cc=.o)
test_zr_OBJS := $(test_zr_OBJS:.cpp=.o)
test_zr_OBJS := $(test_zr_OBJS:.cxx=.o)
test_zr_OBJS := $(test_zr_OBJS:.C=.o)
test_zr_OBJS := $(test_zr_OBJS:.idl=.o)
test_zr_OBJS := $(test_zr_OBJS:.yacc=.o)
test_zr_OBJS := $(test_zr_OBJS:.lex=.o)
test_zr : $(test_zr_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_zr_CONFDES);do cpp -C -o test_zr.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_zr.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_zr_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_zr output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_zr_clean
	-rm -rf $(test_zr_OBJS) $(test_zr_IDLSRCCPP) $(test_zr_IDLSRCH) test_zr.range conf/test_zr.range
	-rm -rf test_zr
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_zr_ccpc
	ccp $(test_zr_SOURCES) --formatter vim
endef
	

define test_zr_cov
	
endef
	



#---------------------end build target : test_zr------------------

#----------------build target : test_to_default--------------------

test_to_default : CC := gcc
test_to_default : CXX := g++
test_to_default : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_to_default : CPPFLAGS := 
test_to_default : IDLFLAGS := 
test_to_default : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_to_default : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_to_default : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_to_default : LDFLAGS :=  $(DEP_LDFLAGS)
test_to_default : LINKFLAGS := -rdynamic

test_to_default_SOURCES := $(wildcard comake_autogen.cpp test_to_default.cpp)
#test_to_default_HEADERS := $(wildcard *.h)
test_to_default_HEADERS := *.h
test_to_default_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_to_default_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_to_default_IDLSRC))
test_to_default_IDLSRCH := $(patsubst %.idl,%.h, $(test_to_default_IDLSRC))
test_to_default_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_to_default.des)
test_to_default_CONFRANGE := $(patsubst %.des,%.range, $(test_to_default_CONFDES))
test_to_default_OBJS := $(test_to_default_IDLSRC:.idl=.o)
test_to_default_OBJS += $(test_to_default_SOURCES:.c=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.cc=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.cpp=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.cxx=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.C=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.idl=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.yacc=.o)
test_to_default_OBJS := $(test_to_default_OBJS:.lex=.o)
test_to_default : $(test_to_default_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_to_default_CONFDES);do cpp -C -o test_to_default.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_to_default.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_to_default_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_to_default output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_to_default_clean
	-rm -rf $(test_to_default_OBJS) $(test_to_default_IDLSRCCPP) $(test_to_default_IDLSRCH) test_to_default.range conf/test_to_default.range
	-rm -rf test_to_default
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_to_default_ccpc
	ccp $(test_to_default_SOURCES) --formatter vim
endef
	

define test_to_default_cov
	
endef
	



#---------------------end build target : test_to_default------------------

#----------------build target : test_checkone--------------------

test_checkone : CC := gcc
test_checkone : CXX := g++
test_checkone : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_checkone : CPPFLAGS := 
test_checkone : IDLFLAGS := 
test_checkone : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_checkone : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_checkone : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_checkone : LDFLAGS :=  $(DEP_LDFLAGS)
test_checkone : LINKFLAGS := -rdynamic

test_checkone_SOURCES := $(wildcard comake_autogen.cpp test_checkone.cpp)
#test_checkone_HEADERS := $(wildcard *.h)
test_checkone_HEADERS := *.h
test_checkone_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_checkone_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_checkone_IDLSRC))
test_checkone_IDLSRCH := $(patsubst %.idl,%.h, $(test_checkone_IDLSRC))
test_checkone_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_checkone.des)
test_checkone_CONFRANGE := $(patsubst %.des,%.range, $(test_checkone_CONFDES))
test_checkone_OBJS := $(test_checkone_IDLSRC:.idl=.o)
test_checkone_OBJS += $(test_checkone_SOURCES:.c=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.cc=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.cpp=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.cxx=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.C=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.idl=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.yacc=.o)
test_checkone_OBJS := $(test_checkone_OBJS:.lex=.o)
test_checkone : $(test_checkone_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_checkone_CONFDES);do cpp -C -o test_checkone.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_checkone.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_checkone_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_checkone output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_checkone_clean
	-rm -rf $(test_checkone_OBJS) $(test_checkone_IDLSRCCPP) $(test_checkone_IDLSRCH) test_checkone.range conf/test_checkone.range
	-rm -rf test_checkone
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_checkone_ccpc
	ccp $(test_checkone_SOURCES) --formatter vim
endef
	

define test_checkone_cov
	
endef
	



#---------------------end build target : test_checkone------------------

#----------------build target : test_reloader--------------------

test_reloader : CC := gcc
test_reloader : CXX := g++
test_reloader : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_reloader : CPPFLAGS := 
test_reloader : IDLFLAGS := 
test_reloader : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_reloader : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_reloader : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_reloader : LDFLAGS :=  $(DEP_LDFLAGS)
test_reloader : LINKFLAGS := -rdynamic

test_reloader_SOURCES := $(wildcard comake_autogen.cpp test_reloader.cpp)
#test_reloader_HEADERS := $(wildcard *.h)
test_reloader_HEADERS := *.h
test_reloader_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_reloader_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_reloader_IDLSRC))
test_reloader_IDLSRCH := $(patsubst %.idl,%.h, $(test_reloader_IDLSRC))
test_reloader_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_reloader.des)
test_reloader_CONFRANGE := $(patsubst %.des,%.range, $(test_reloader_CONFDES))
test_reloader_OBJS := $(test_reloader_IDLSRC:.idl=.o)
test_reloader_OBJS += $(test_reloader_SOURCES:.c=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.cc=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.cpp=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.cxx=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.C=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.idl=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.yacc=.o)
test_reloader_OBJS := $(test_reloader_OBJS:.lex=.o)
test_reloader : $(test_reloader_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_reloader_CONFDES);do cpp -C -o test_reloader.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_reloader.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_reloader_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_reloader output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_reloader_clean
	-rm -rf $(test_reloader_OBJS) $(test_reloader_IDLSRCCPP) $(test_reloader_IDLSRCH) test_reloader.range conf/test_reloader.range
	-rm -rf test_reloader
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_reloader_ccpc
	ccp $(test_reloader_SOURCES) --formatter vim
endef
	

define test_reloader_cov
	
endef
	



#---------------------end build target : test_reloader------------------

#----------------build target : test_sigreload--------------------

test_sigreload : CC := gcc
test_sigreload : CXX := g++
test_sigreload : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_sigreload : CPPFLAGS := 
test_sigreload : IDLFLAGS := 
test_sigreload : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_sigreload : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_sigreload : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_sigreload : LDFLAGS :=  $(DEP_LDFLAGS)
test_sigreload : LINKFLAGS := -rdynamic

test_sigreload_SOURCES := $(wildcard comake_autogen.cpp test_sigreload.cpp)
#test_sigreload_HEADERS := $(wildcard *.h)
test_sigreload_HEADERS := *.h
test_sigreload_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_sigreload_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_sigreload_IDLSRC))
test_sigreload_IDLSRCH := $(patsubst %.idl,%.h, $(test_sigreload_IDLSRC))
test_sigreload_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_sigreload.des)
test_sigreload_CONFRANGE := $(patsubst %.des,%.range, $(test_sigreload_CONFDES))
test_sigreload_OBJS := $(test_sigreload_IDLSRC:.idl=.o)
test_sigreload_OBJS += $(test_sigreload_SOURCES:.c=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.cc=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.cpp=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.cxx=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.C=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.idl=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.yacc=.o)
test_sigreload_OBJS := $(test_sigreload_OBJS:.lex=.o)
test_sigreload : $(test_sigreload_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_sigreload_CONFDES);do cpp -C -o test_sigreload.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_sigreload.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_sigreload_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_sigreload output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_sigreload_clean
	-rm -rf $(test_sigreload_OBJS) $(test_sigreload_IDLSRCCPP) $(test_sigreload_IDLSRCH) test_sigreload.range conf/test_sigreload.range
	-rm -rf test_sigreload
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_sigreload_ccpc
	ccp $(test_sigreload_SOURCES) --formatter vim
endef
	

define test_sigreload_cov
	
endef
	



#---------------------end build target : test_sigreload------------------

#----------------build target : test_filereload--------------------

test_filereload : CC := gcc
test_filereload : CXX := g++
test_filereload : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_filereload : CPPFLAGS := 
test_filereload : IDLFLAGS := 
test_filereload : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_filereload : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_filereload : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_filereload : LDFLAGS :=  $(DEP_LDFLAGS)
test_filereload : LINKFLAGS := -rdynamic

test_filereload_SOURCES := $(wildcard comake_autogen.cpp test_filereload.cpp)
#test_filereload_HEADERS := $(wildcard *.h)
test_filereload_HEADERS := *.h
test_filereload_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_filereload_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_filereload_IDLSRC))
test_filereload_IDLSRCH := $(patsubst %.idl,%.h, $(test_filereload_IDLSRC))
test_filereload_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_filereload.des)
test_filereload_CONFRANGE := $(patsubst %.des,%.range, $(test_filereload_CONFDES))
test_filereload_OBJS := $(test_filereload_IDLSRC:.idl=.o)
test_filereload_OBJS += $(test_filereload_SOURCES:.c=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.cc=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.cpp=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.cxx=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.C=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.idl=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.yacc=.o)
test_filereload_OBJS := $(test_filereload_OBJS:.lex=.o)
test_filereload : $(test_filereload_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_filereload_CONFDES);do cpp -C -o test_filereload.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_filereload.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_filereload_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_filereload output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_filereload_clean
	-rm -rf $(test_filereload_OBJS) $(test_filereload_IDLSRCCPP) $(test_filereload_IDLSRCH) test_filereload.range conf/test_filereload.range
	-rm -rf test_filereload
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_filereload_ccpc
	ccp $(test_filereload_SOURCES) --formatter vim
endef
	

define test_filereload_cov
	
endef
	



#---------------------end build target : test_filereload------------------

#----------------build target : test_setvalue--------------------

test_setvalue : CC := gcc
test_setvalue : CXX := g++
test_setvalue : CXXFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_setvalue : CPPFLAGS := 
test_setvalue : IDLFLAGS := 
test_setvalue : CFLAGS := -pipe -fsigned-char -Wall -W -g -fPIC
test_setvalue : INCPATH :=  -I. -I.. $(DEP_INCPATH)
test_setvalue : LDLIBS := -lcrypto -lm -lpthread $(DEP_LDLIBS)
test_setvalue : LDFLAGS :=  $(DEP_LDFLAGS)
test_setvalue : LINKFLAGS := -rdynamic

test_setvalue_SOURCES := $(wildcard comake_autogen.cpp test_setvalue.cpp)
#test_setvalue_HEADERS := $(wildcard *.h)
test_setvalue_HEADERS := *.h
test_setvalue_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test_setvalue_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test_setvalue_IDLSRC))
test_setvalue_IDLSRCH := $(patsubst %.idl,%.h, $(test_setvalue_IDLSRC))
test_setvalue_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test_setvalue.des)
test_setvalue_CONFRANGE := $(patsubst %.des,%.range, $(test_setvalue_CONFDES))
test_setvalue_OBJS := $(test_setvalue_IDLSRC:.idl=.o)
test_setvalue_OBJS += $(test_setvalue_SOURCES:.c=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.cc=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.cpp=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.cxx=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.C=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.idl=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.yacc=.o)
test_setvalue_OBJS := $(test_setvalue_OBJS:.lex=.o)
test_setvalue : $(test_setvalue_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test_setvalue_CONFDES);do cpp -C -o test_setvalue.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test_setvalue.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test_setvalue_output
	mkdir -p output
	mkdir -p output/bin
	cp -rf test_setvalue output/bin
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define test_setvalue_clean
	-rm -rf $(test_setvalue_OBJS) $(test_setvalue_IDLSRCCPP) $(test_setvalue_IDLSRCH) test_setvalue.range conf/test_setvalue.range
	-rm -rf test_setvalue
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test_setvalue_ccpc
	ccp $(test_setvalue_SOURCES) --formatter vim
endef
	

define test_setvalue_cov
	
endef
	



#---------------------end build target : test_setvalue------------------

define _output
	$(test_get_default_output)
	$(test_1010new_output)
	$(test_ivar_output)
	$(test_auto_output)
	$(test_cfg_output)
	$(test_conf_output)
	$(test_demo_output)
	$(test_err_output)
	$(test_get_value_output)
	$(test_option_output)
	$(test_rawdata_output)
	$(test_reader_output)
	$(test_rebuild_output)
	$(test_str_output)
	$(test_t1_output)
	$(test_trans_float_output)
	$(test_trans_str2str_output)
	$(test_xiaowei_output)
	$(test_cfg2_output)
	$(test_cfg3_output)
	$(test_zr_output)
	$(test_to_default_output)
	$(test_checkone_output)
	$(test_reloader_output)
	$(test_sigreload_output)
	$(test_filereload_output)
	$(test_setvalue_output)
endef
	

define _clean
	$(test_get_default_clean)
	$(test_1010new_clean)
	$(test_ivar_clean)
	$(test_auto_clean)
	$(test_cfg_clean)
	$(test_conf_clean)
	$(test_demo_clean)
	$(test_err_clean)
	$(test_get_value_clean)
	$(test_option_clean)
	$(test_rawdata_clean)
	$(test_reader_clean)
	$(test_rebuild_clean)
	$(test_str_clean)
	$(test_t1_clean)
	$(test_trans_float_clean)
	$(test_trans_str2str_clean)
	$(test_xiaowei_clean)
	$(test_cfg2_clean)
	$(test_cfg3_clean)
	$(test_zr_clean)
	$(test_to_default_clean)
	$(test_checkone_clean)
	$(test_reloader_clean)
	$(test_sigreload_clean)
	$(test_filereload_clean)
	$(test_setvalue_clean)
endef
	

ccpc : 
	$(test_get_default_ccpc)
	$(test_1010new_ccpc)
	$(test_ivar_ccpc)
	$(test_auto_ccpc)
	$(test_cfg_ccpc)
	$(test_conf_ccpc)
	$(test_demo_ccpc)
	$(test_err_ccpc)
	$(test_get_value_ccpc)
	$(test_option_ccpc)
	$(test_rawdata_ccpc)
	$(test_reader_ccpc)
	$(test_rebuild_ccpc)
	$(test_str_ccpc)
	$(test_t1_ccpc)
	$(test_trans_float_ccpc)
	$(test_trans_str2str_ccpc)
	$(test_xiaowei_ccpc)
	$(test_cfg2_ccpc)
	$(test_cfg3_ccpc)
	$(test_zr_ccpc)
	$(test_to_default_ccpc)
	$(test_checkone_ccpc)
	$(test_reloader_ccpc)
	$(test_sigreload_ccpc)
	$(test_filereload_ccpc)
	$(test_setvalue_ccpc)

cov : 
	cov01 -1
	make clean
	make 
	cov01 -0



output : test_get_default test_1010new test_ivar test_auto test_cfg test_conf test_demo test_err test_get_value test_option test_rawdata test_reader test_rebuild test_str test_t1 test_trans_float test_trans_str2str test_xiaowei test_cfg2 test_cfg3 test_zr test_to_default test_checkone test_reloader test_sigreload test_filereload test_setvalue 
	$(_output)
	rm -rf $(MAKDEP)

$(MAKDEP) : $(wildcard comake_autogen.cpp test_get_default.cpp test_1010new.cpp test_ivar.cpp test_auto.cpp test_cfg.cpp test_conf.cpp test_demo.cpp test_err.cpp test_get_value.cpp test_option.cpp test_rawdata.cpp test_reader.cpp test_rebuild.cpp test_str.cpp test_t1.cpp test_trans_float.cpp test_trans_str2str.cpp test_xiaowei.cpp test_cfg2.cpp test_cfg3.cpp test_zr.cpp test_to_default.cpp test_checkone.cpp test_reloader.cpp test_sigreload.cpp test_filereload.cpp test_setvalue.cpp)
	-$(CC) -MG -MM $(CPPFLAGS) $(INCPATH) $(DEP_INCPATH) $^ > $@

clean:
	$(_clean)
	rm -rf $(MAKDEP)


