// Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package baidu.paddle_serving.configure;

// we should have a dag representation here

message StrVec {
  repeated string str = 1;
}

message IntVec {
  repeated int32 ids = 1;
}

message Node {
  repeated string pre_node_names = 1; // precedent operator name
  repeated StrVec pre_node_input_names = 2; // [C_0_emb, C_1_emb], [dense]
  repeated IntVec pre_node_input_idx = 3; // dense -> 2
  repeated string node_output_names = 4; // pre-defined
  optional string op_node_name = 5; // operator name
}

message Graph {
  repeated Node nodes = 1; // sorted through topo here
  repeated string feed_name = 2; // rpc feed, feed of service
  repeated string origin_name = 3; // underlying tensor names
  repeated string alias_name = 4; // human readable names
}

message FeedVar {
  optional string name = 1;
  optional string alias_name = 2;
  optional bool is_lod_tensor = 3 [ default = false ];
  optional int32 feed_type = 4 [ default = 0 ];
  repeated int32 shape = 5;
}
message FetchVar {
  optional string name = 1;
  optional string alias_name = 2;
  optional bool is_lod_tensor = 3 [ default = false ];
  optional int32 fetch_type = 4 [ default = 0 ];
  repeated int32 shape = 5;
}

message GeneralModelConfig {
  optional Graph graph = 1;
  repeated FeedVar feed_var = 2;
  repeated FetchVar fetch_var = 3;
};
